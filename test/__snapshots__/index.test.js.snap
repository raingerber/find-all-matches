// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`edge cases involving <html> and <body> should exclude selectors where known ids were included in the unmatched section 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "isPartialMatch": false,
          "selector": "???#div-id???",
        },
        Object {
          "isPartialMatch": false,
          "selector": "???#section-id #div-id???",
        },
      ],
    },
  ],
  "matches": Array [
    Object {
      "isPartialMatch": true,
      "selector": "#another-id ???#section-id???",
    },
  ],
}
`;

exports[`edge cases involving <html> and <body> should find matches for the <body> element 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "isPartialMatch": false,
          "selector": "???body > div???",
        },
      ],
    },
  ],
  "matches": Array [
    Object {
      "isPartialMatch": false,
      "selector": "???body???",
    },
    Object {
      "isPartialMatch": false,
      "selector": "???html body???",
    },
    Object {
      "isPartialMatch": true,
      "selector": "html.class ???body???",
    },
  ],
}
`;

exports[`edge cases involving <html> and <body> should include "body >" in a full match when the snippet includes <body> 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "selector": "???body > *???",
        },
      ],
    },
  ],
  "matches": Array [],
}
`;

exports[`edge cases involving <html> and <body> should not include injected style tags in the output 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [
        Object {
          "children": Array [],
          "html": "<style type=\\"text/css\\">",
          "matches": Array [],
        },
      ],
      "html": "<head>",
      "matches": Array [],
    },
    Object {
      "children": Array [
        Object {
          "children": Array [],
          "html": "<div>",
          "matches": Array [
            Object {
              "isPartialMatch": false,
              "selector": "div",
            },
            Object {
              "isPartialMatch": false,
              "selector": "div",
            },
          ],
        },
      ],
      "html": "<body>",
      "matches": Array [],
    },
  ],
  "html": "<html>",
  "matches": Array [],
}
`;

exports[`edge cases involving <html> and <body> should not return "body >" in a full match when the snippet does not include <body> 1`] = `
Object {
  "matches": Array [
    Object {
      "isPartialMatch": true,
      "selector": "body > ???*???",
    },
  ],
}
`;

exports[`edge cases involving <html> and <body> should not return a partial match for "body div *" or body > *" on the <body> tag itself 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "isPartialMatch": false,
          "selector": "???body > *???",
        },
      ],
    },
  ],
  "matches": Array [],
}
`;

exports[`edge cases involving <html> and <body> should work for a "snippet" with <html> as the root element 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [],
    },
    Object {
      "children": Array [
        Object {
          "children": Array [
            Object {
              "children": Array [],
              "matches": Array [],
            },
            Object {
              "children": Array [],
              "matches": Array [
                Object {
                  "isPartialMatch": false,
                  "selector": "???body div + div???",
                },
              ],
            },
          ],
          "matches": Array [
            Object {
              "isPartialMatch": false,
              "selector": "???html section???",
            },
            Object {
              "isPartialMatch": false,
              "selector": "???body > section???",
            },
          ],
        },
      ],
      "matches": Array [],
    },
  ],
  "matches": Array [
    Object {
      "isPartialMatch": false,
      "selector": "???html???",
    },
  ],
}
`;

exports[`findMatches should find matches for multiple root elements 1`] = `
Array [
  Object {
    "children": Array [],
    "matches": Array [],
  },
  Object {
    "children": Array [],
    "matches": Array [
      Object {
        "selector": ".b",
      },
      Object {
        "selector": "div + div",
      },
    ],
  },
  Object {
    "children": Array [
      Object {
        "children": Array [],
        "matches": Array [],
      },
    ],
    "matches": Array [
      Object {
        "selector": ".c",
      },
      Object {
        "selector": "div + div",
      },
    ],
  },
]
`;

exports[`findMatches should ignore partial matches when options.includePartialMatches is false 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "selector": "???div???",
        },
        Object {
          "selector": "???div > div???",
        },
      ],
    },
  ],
  "matches": Array [
    Object {
      "selector": "???div???",
    },
  ],
}
`;

exports[`findMatches should include css arrays when option.includeCss is true 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "css": Array [
            "color: red",
          ],
          "isPartialMatch": false,
          "selector": "div",
        },
        Object {
          "css": Array [
            "color: blue",
          ],
          "isPartialMatch": false,
          "selector": "div > div",
        },
        Object {
          "css": Array [
            "color: green",
          ],
          "isPartialMatch": true,
          "selector": "div > div > div",
        },
      ],
    },
  ],
  "matches": Array [
    Object {
      "css": Array [
        "color: red",
      ],
      "isPartialMatch": false,
      "selector": "div",
    },
    Object {
      "css": Array [
        "color: blue",
      ],
      "isPartialMatch": true,
      "selector": "div > div",
    },
    Object {
      "css": Array [
        "color: green",
      ],
      "isPartialMatch": true,
      "selector": "div > div > div",
    },
  ],
}
`;

exports[`findMatches should include partial matches when options.includePartialMatches is true 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [],
      "matches": Array [
        Object {
          "isPartialMatch": false,
          "selector": "???div???",
        },
        Object {
          "isPartialMatch": false,
          "selector": "???div > div???",
        },
        Object {
          "isPartialMatch": true,
          "selector": "div > ???div > div???",
        },
      ],
    },
  ],
  "matches": Array [
    Object {
      "isPartialMatch": false,
      "selector": "???div???",
    },
    Object {
      "isPartialMatch": true,
      "selector": "div > ???div???",
    },
    Object {
      "isPartialMatch": true,
      "selector": "div > div > ???div???",
    },
  ],
}
`;

exports[`findMatches should work for a complex bit of html and css 1`] = `
Object {
  "children": Array [
    Object {
      "children": Array [
        Object {
          "children": Array [
            Object {
              "children": Array [],
              "html": "<li>",
              "matches": Array [
                Object {
                  "isPartialMatch": true,
                  "media": "(max-width: 500px)",
                  "selector": ".class1 > .class2 > ???section > div > * > li:first-of-type???",
                },
                Object {
                  "isPartialMatch": true,
                  "media": "(max-width: 500px)",
                  "selector": ".class1 > class2 ???li:first-of-type???",
                },
              ],
            },
            Object {
              "children": Array [],
              "html": "<li>",
              "matches": Array [
                Object {
                  "isPartialMatch": true,
                  "selector": "html.namaste ???li:first-of-type ~ li???",
                },
              ],
            },
            Object {
              "children": Array [],
              "html": "<li>",
              "matches": Array [
                Object {
                  "isPartialMatch": true,
                  "selector": "html.namaste ???li:first-of-type ~ li???",
                },
              ],
            },
          ],
          "html": "<ul class=\\"container\\">",
          "matches": Array [
            Object {
              "isPartialMatch": false,
              "selector": "???.container???",
            },
          ],
        },
      ],
      "html": "<div>",
      "matches": Array [],
    },
  ],
  "html": "<section class=\\"container\\">",
  "matches": Array [
    Object {
      "isPartialMatch": false,
      "selector": "???.container???",
    },
    Object {
      "isPartialMatch": true,
      "selector": ".sibling ~ ???section???",
    },
    Object {
      "isPartialMatch": true,
      "media": "(max-width: 1000px)",
      "selector": "div[data-gloop=\\"true\\"] > ???*???",
    },
  ],
}
`;

exports[`findMatchesFactory throws when findMatches(...) is called after findMatches.close() 1`] = `[Error: Unable to call findMatches(...) after findMatches.close()]`;
